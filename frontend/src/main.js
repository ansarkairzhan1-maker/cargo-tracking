// frontend/src/main.js

const AUTH_TOKEN = localStorage.getItem('access_token');
const USER_DATA = JSON.parse(localStorage.getItem('user_data') || '{}');

console.log('üîê DEBUG: Token =', AUTH_TOKEN);
console.log('üë§ DEBUG: User =', USER_DATA);

// Check authentication on page load
if (!AUTH_TOKEN) {
    console.log('‚ùå No token, redirecting to login...');
    window.location.href = '/login';
} else {
    console.log('‚úÖ Token found, continuing...');
}

const USER_CODE = USER_DATA.personal_code || "106";
console.log('üî¢ User Code:', USER_CODE);
// === DOM ELEMENTS ===
const PARCELS_LIST = document.getElementById("parcels-list");
const ADD_BTN = document.getElementById("add-btn");
const REFRESH_BTN = document.getElementById("refresh-btn");
const TRACK_MODAL = document.getElementById("track-modal");
const MODAL_CLOSE_BTN = document.querySelector(".close-btn");
const SUBMIT_TRACK_BTN = document.getElementById("submit-track-btn");
const TRACK_NUMBER_INPUT = document.getElementById("track-number-input");
const MODAL_MESSAGE = document.getElementById("modal-message");
const SEARCH_INPUT = document.getElementById("search-input");
const SEARCH_RESULT_CARD = document.getElementById("search-result-card");
const SEARCH_RESULT_CONTAINER = document.getElementById("search-result-container");
const USER_PARCELS_CARD = document.getElementById("user-parcels-card");

// === AUTHENTICATED FETCH HELPER ===
async function authFetch(url, options = {}) {
    options.headers = {
        ...options.headers,
        'Authorization': `Bearer ${AUTH_TOKEN}`,
        'Content-Type': 'application/json'
    };
    
    const response = await fetch(url, options);
    
    if (response.status === 401) {
        localStorage.clear();
        alert('Session expired. Please login again.');
        window.location.href = '/login';
    }
    
    return response;
}

// === RENDER FUNCTIONS ===

/**
 * Generates HTML for one timeline status item.
 */
function renderStatusItem(event) {
    const isCompleted = event.completed;
    const iconClass = isCompleted ? "completed" : "pending";
    const dateText = event.date !== "‚Äî" && isCompleted ? event.date : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
    const dateClass = dateText === "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö" ? "no-data" : "";
    const iconContent = isCompleted ? "‚úî" : "";

    return `
        <div class="track-status-item">
            <div class="status-icon ${iconClass}">${iconContent}</div>
            <div class="status-content">
                <div class="status-title">${event.status}</div>
                <div class="status-date ${dateClass}">${dateText}</div>
            </div>
        </div>
    `;
}

/**
 * Generates HTML card for a track.
 */
function renderTrackCard(track, isSearchResult = false) {
    const headerClass = isSearchResult ? "track-header search-result" : "track-header";
    
    const assignmentNote = (isSearchResult && track.is_assigned && track.personal_code !== USER_CODE)
        ? `<p class="alert alert-warning p-2 mt-2 mb-0" style="font-size: 14px;">
            ‚ö†Ô∏è –¢—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É (–ö–æ–¥: ${track.personal_code}).
           </p>`
        : '';
    
    const deleteButton = !isSearchResult ? 
        `<button class="delete-btn" data-track="${track.track_number}" title="–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫">üóëÔ∏è</button>`
        : '';

    const timelineHTML = track.status_timeline
        .map(item => renderStatusItem(item))
        .join('');

    return `
        <div class="track-card" id="track-${track.track_number}">
            <div class="${headerClass}">
                <span>${track.track_number}</span>
                ${deleteButton}
            </div>
            <div class="track-body">
                ${assignmentNote}
                <div class="track-notes">
                    –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <strong>${track.current_status || '–û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'}</strong>
                </div>
                ${timelineHTML}
            </div>
        </div>
    `;
}

// === DATA LOADING FUNCTIONS ===

/**
 * Loads and displays user's tracks.
 */
async function loadUserTracks() {
    PARCELS_LIST.innerHTML = `<p class="no-tracks-text">–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ —Ç—Ä–µ–∫–∏...</p>`;
    USER_PARCELS_CARD.style.display = 'block';
    SEARCH_RESULT_CARD.style.display = 'none';

    try {
        const res = await authFetch(`/api/users/${USER_CODE}/tracks`);
        if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤");
        
        const tracks = await res.json();

        if (tracks.length === 0) {
            PARCELS_LIST.innerHTML = `<p class="no-tracks-text">–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.</p>`;
        } else {
            PARCELS_LIST.innerHTML = tracks.map(t => renderTrackCard(t, false)).join('');
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        PARCELS_LIST.innerHTML = `<p class="no-tracks-text text-danger">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. ‚ùå</p>`;
    }
}

// === MODAL FUNCTIONS ===

/**
 * Opens modal for adding track.
 */
function openTrackModal() {
    TRACK_NUMBER_INPUT.value = '';
    MODAL_MESSAGE.textContent = '';
    TRACK_MODAL.style.display = 'flex';
}

/**
 * Closes track modal.
 */
function closeTrackModal() {
    TRACK_MODAL.style.display = 'none';
}

/**
 * Handles track submission.
 */
async function handleSubmitTrack() {
    const trackNumber = TRACK_NUMBER_INPUT.value.trim().toUpperCase();
    MODAL_MESSAGE.textContent = '';

    if (!trackNumber) {
        MODAL_MESSAGE.textContent = "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä.";
        return;
    }

    SUBMIT_TRACK_BTN.disabled = true;

    try {
        const res = await authFetch("/api/tracks/assign", {
            method: "POST",
            body: JSON.stringify({
                track_number: trackNumber,
                personal_code: USER_CODE
            })
        });

        const data = await res.json();

        if (res.ok) {
            MODAL_MESSAGE.textContent = "‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É!";
            MODAL_MESSAGE.style.color = "green";
            setTimeout(() => {
                closeTrackModal();
                loadUserTracks(); 
            }, 1500);
        } else {
            MODAL_MESSAGE.textContent = `‚ùå –û—à–∏–±–∫–∞: ${data.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫."}`;
            MODAL_MESSAGE.style.color = "red";
        }

    } catch (error) {
        console.error("Network error during track assignment:", error);
        MODAL_MESSAGE.textContent = "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.";
        MODAL_MESSAGE.style.color = "red";
    } finally {
        SUBMIT_TRACK_BTN.disabled = false;
    }
}

// === SEARCH FUNCTIONS ===

/**
 * Searches for a track by number.
 */
async function handleTrackSearch(trackNumber) {
    if (!trackNumber) {
        USER_PARCELS_CARD.style.display = 'block';
        SEARCH_RESULT_CARD.style.display = 'none';
        return;
    }

    SEARCH_RESULT_CONTAINER.innerHTML = `<p class="no-tracks-text">üîç –ò—â—É —Ç—Ä–µ–∫ ${trackNumber}...</p>`;
    USER_PARCELS_CARD.style.display = 'none';
    SEARCH_RESULT_CARD.style.display = 'block';

    try {
        // Public search doesn't require auth
        const res = await fetch(`/api/tracks/search/${trackNumber.toUpperCase()}`);
        const data = await res.json();

        if (res.ok) {
            SEARCH_RESULT_CONTAINER.innerHTML = renderTrackCard(data, true);
        } else if (res.status === 404) {
            SEARCH_RESULT_CONTAINER.innerHTML = `
                <p class="alert alert-info text-center">
                    –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä <strong>${trackNumber}</strong> –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ. 
                    –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å" –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏ –æ–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å–∞.
                </p>`;
        } else {
            SEARCH_RESULT_CONTAINER.innerHTML = `<p class="text-danger">–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${data.detail || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."}</p>`;
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:", error);
        SEARCH_RESULT_CONTAINER.innerHTML = `<p class="text-danger">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.</p>`;
    }
}

// === INITIALIZATION ===

document.addEventListener("DOMContentLoaded", () => {
    console.log("‚úÖ DELTA CARGO User Panel –∑–∞–≥—Ä—É–∂–µ–Ω");
    
    // Update user code display
    const userCodeElement = document.getElementById('user-code');
    if (userCodeElement && USER_DATA.personal_code) {
        userCodeElement.textContent = USER_DATA.personal_code;
    }
    
    // Add logout functionality
    document.querySelector('.logout')?.addEventListener('click', (e) => {
        e.preventDefault();
        localStorage.clear();
        window.location.href = '/login';
    });
    
    // Load user tracks on start
    loadUserTracks();

    // Modal handlers
    ADD_BTN.addEventListener('click', openTrackModal);
    MODAL_CLOSE_BTN.addEventListener('click', closeTrackModal);
    SUBMIT_TRACK_BTN.addEventListener('click', handleSubmitTrack);
    window.addEventListener('click', (event) => {
        if (event.target === TRACK_MODAL) {
            closeTrackModal();
        }
    });

    // Search handler
    SEARCH_INPUT.addEventListener('keyup', (e) => {
        const value = e.target.value.trim();
        if (e.key === 'Enter' && value) {
            handleTrackSearch(value);
        } else if (!value) {
            handleTrackSearch('');
        }
    });

    // Delete track handler (event delegation)
    PARCELS_LIST.addEventListener('click', async (e) => {
        if (e.target.classList.contains('delete-btn')) {
            const trackNumber = e.target.dataset.track;
            if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ ${trackNumber} –∏–∑ —Å–ø–∏—Å–∫–∞?`)) return;

            try {
                const res = await authFetch(`/api/tracks/archive/${trackNumber}`, { 
                    method: 'POST' 
                });
                
                if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞");
                
                e.target.closest('.track-card').remove();
                loadUserTracks(); 
            } catch (error) {
                alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:", error);
            }
        }
    });
    
    // Refresh button
    REFRESH_BTN.addEventListener("click", () => { 
        loadUserTracks();
    });
    
    // Navigation tabs
    document.querySelectorAll(".nav-btn").forEach(btn => {
        btn.addEventListener("click", () => {
             document.querySelectorAll(".nav-btn").forEach(b => b.classList.remove('active'));
             btn.classList.add('active');
             
             if (btn.dataset.tab === 'parcels') {
                 loadUserTracks();
             } else {
                 USER_PARCELS_CARD.style.display = 'none';
                 SEARCH_RESULT_CARD.style.display = 'block';
                 SEARCH_RESULT_CONTAINER.innerHTML = `<p class="alert alert-light text-center">
                    –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "${btn.textContent}" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
                 </p>`;
             }
        });
    });
});
// === CHANGE PASSWORD FUNCTIONALITY ===
document.getElementById('change-password-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const currentPassword = document.getElementById('current-password').value;
    const newPassword = document.getElementById('new-password').value;
    const confirmPassword = document.getElementById('confirm-password').value;
    const alertContainer = document.getElementById('password-alert-container');
    const submitBtn = document.getElementById('submit-password-btn');
    
    alertContainer.innerHTML = '';
    
    if (newPassword !== confirmPassword) {
        alertContainer.innerHTML = `
            <div class="alert alert-danger" role="alert">
                ‚ùå –ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
            </div>
        `;
        return;
    }
    
    if (newPassword.length < 6) {
        alertContainer.innerHTML = `
            <div class="alert alert-danger" role="alert">
                ‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤
            </div>
        `;
        return;
    }
    
    submitBtn.disabled = true;
    submitBtn.textContent = '–ò–∑–º–µ–Ω–µ–Ω–∏–µ...';
    
    try {
        const formData = new FormData();
        formData.append('old_password', currentPassword);
        formData.append('new_password', newPassword);
        
        const response = await authFetch('/api/auth/change-password', {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        
        if (response.ok) {
            alertContainer.innerHTML = `
                <div class="alert alert-success" role="alert">
                    ‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!
                </div>
            `;
            
            document.getElementById('change-password-form').reset();
            
            setTimeout(() => {
                const modal = bootstrap.Modal.getInstance(document.getElementById('changePasswordModal'));
                modal.hide();
                alertContainer.innerHTML = '';
            }, 2000);
        } else {
            alertContainer.innerHTML = `
                <div class="alert alert-danger" role="alert">
                    ‚ùå ${data.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è'}
                </div>
            `;
        }
    } catch (error) {
        console.error('Change password error:', error);
        alertContainer.innerHTML = `
            <div class="alert alert-danger" role="alert">
                ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
            </div>
        `;
    } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å';
    }
});

document.getElementById('changePasswordModal')?.addEventListener('hidden.bs.modal', function () {
    document.getElementById('change-password-form').reset();
    document.getElementById('password-alert-container').innerHTML = '';
});

// Update user name in header
const userNameElement = document.getElementById('user-name');
if (userNameElement && USER_DATA.name) {
    userNameElement.textContent = USER_DATA.name;
}
